@bind { Apollo.toCharArray(string s) }
new function<char[]> toCharArray(string s);
/* no need to have the {} since @bind will automatically fill in the function body */

new function<void> interpret{string code}{
  new char[] tokens {toCharArray{code}};
  new int[256] memory {};
  new int pointer;
  new int c;
  new int index;
  
  loop while index < len{tokens} do
    match tokens[index] with
    `>` { inc pointer; }
    `<` { dec pointer; }
    `+` { inc memory[pointer]; }
    `-` { dec memory[pointer]; }
    `.` { print char {memory[pointer]}; } /* implictly converts memory[pointer] to a char since it is an int */
    `,` { read char {memory[pointer]}; } /* implictly converts the char to an int since memory is an int[] */

    `[` {
      if memory[pointer] == 0 then
        inc index;
        loop while c > 0 || tokens[index] != `]` do
          if tokens[index] == `[` then inc c;
          elif tokens[index] == `]` then dec c;

          inc index;
        end
      end
    }

    `]` {
      if memory[pointer] != 0 then
        dec index;
        loop while c > 0 || tokens[index] != `[` do
          if tokens[index] == `]` then inc c;
          elif tokens[index] == `[` then dec c;

          dec index;
        end
      end
    }

    otherwise { eprint string {"Invalid token: " + tokens[index]}; }
  end
};

new function<void> main{string[] args}{
  interpret{in{}};
};

/* ngl rn I am LOVING this syntax, so very clean, so very simple */