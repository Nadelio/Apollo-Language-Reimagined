@bind { Apollo.readInChar() }
new function<char> readInChar(){};

@bind { Apollo.castToChar(int n) }
new function<char> asChar(int n){};

@bind { Apollo.castToInt(char c) }
new function<int> asInt(char c){};

new function<void> interpret(string code){
	new char[] tokens {toCharArray <- {code}};
	new int[256] memory {};
	new int pointer {0};
	new int c {0};
	new int index {0};
	
	loop while(index < len <- {tokens}){
		match{tokens[index]}{
			`>` { inc pointer; }
			`<` { dec pointer; }
			`+` { inc memory[pointer]; }
			`-` { dec memory[pointer]; }
			`.` { print <- {asChar <- {memory[pointer]}}; }
			`,` { set memory[pointer] {asInt <- {readInChar <- {}}}; }
			`[` {
				if(memory[pointer] == 0){
					inc index;
					loop while(c > 0 || tokens[index] != ']'){
						if(tokens[index] == `[`){ inc c; }
						else if(tokens[index] == `]`){ dec c; }
						inc index;
					}
				}
			}
			`]` {
				if(memory[pointer] != 0){
					dec index;
					loop while(c > 0 || tokens[index] != `[`){
						if(tokens[index] == `]`){ inc c; }
						else if(tokens[index] == `[`){ dec c; }
						dec index;
					}
				}
			}
		}
	}

	new function<void> main(string[] args){
		interpret <- {in <- {}};
	}
}